// p1_a
CREATE SCHEMA LibraryManagement;

// p1_b
CREATE TABLE authors (
	author_id INT PRIMARY KEY AUTO_INCREMENT,
  author_name VARCHAR(45)
);

// p1_c
CREATE TABLE genres (
	genre_id INT PRIMARY KEY AUTO_INCREMENT,
  genre_name VARCHAR(45)
);

// p1_d
CREATE TABLE books (
	book_id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(45),
  publication_year YEAR,
  author_id INT,
  genre_id INT,
  FOREIGN KEY (author_id) REFERENCES authors(author_id),
  FOREIGN KEY (genre_id ) REFERENCES genres(genre_id)
);

// p1_e
CREATE TABLE users (
	user_id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(45),
  email VARCHAR(254)
);

// p1_f
CREATE TABLE borrowed_books (
	borrow_id INT PRIMARY KEY AUTO_INCREMENT,
  book_id INT,
  user_id INT,
  borrow_date DATE,
  return_date DATE,
  FOREIGN KEY (book_id) REFERENCES books(book_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

_______________________________________
=======================================

// p2_a
INSERT INTO authors(author_name)
VALUES 
	("Robert Martin"), 
  ("Angel Sola Orbaiceta"), 
  ("Neal Ford");

// p2_b
INSERT INTO genres(genre_name)
VALUES ("Programming"), ("Adventure"), ("Detective");

// p2_c
INSERT INTO users(username, email)
VALUES 
	('john_doe', 'john.doe@example.com'),
  ('jane_smith', 'jane.smith@example.com'),
  ('alice_jones', 'alice.jones@example.com'),
  ('bob_brown', 'bob.brown@example.com'),
  ('charlie_black', 'charlie.black@example.com');

// p2_d
INSERT INTO books(title, publication_year, author_id, genre_id)
VALUES 
	("Clean Code", 2019, 1, 1), 
	("Build a Frontend Web Framework", 2024, 2, 1), 
	("Fundamentals of Software Architecture", 2020, 3, 1);

// p2_e
INSERT INTO borrowed_books(book_id, user_id, borrow_date, return_date)
VALUES 
	(2, 3, "2024-04-21", "2024-05-31"), 
  (1, 1, "2024-01-11", "2024-04-27"), 
  (3, 3, "2024-02-01", "2024-06-09");

_______________________________________
=======================================

// p3
SELECT 
  order_details.id AS order_detail_id,
    order_details.quantity,
  orders.id AS order_id, 
    orders.date AS order_date,
  customers.id AS customer_id, 
    customers.name AS customer_name, 
    customers.address AS customer_address, 
    customers.city AS customer_city, 
    customers.postal_code AS customer_postal_code, 
    customers.country AS customer_country, 
  products.id AS product_id,
    products.name AS product_name,
    products.unit AS product_unit,
    products.price AS product_price,
  categories.id AS category_id,
    categories.name AS category_name,
    categories.description AS category_description,
  employees.employee_id,
    employees.last_name AS employee_last_name,
    employees.first_name AS employee_first_name,
    employees.birthdate AS employee_birthdate,
    employees.photo AS employee_photo,
    employees.notes AS employee_notes,
  shippers.id AS shipper_id,
    shippers.name AS shipper_name,
    shippers.phone AS shipper_phone,
  suppliers.id AS supplier_id,
    suppliers.name AS supplier_name,
    suppliers.contact AS supplier_contact,
    suppliers.address AS supplier_address,
    suppliers.city AS supplier_city,
    suppliers.postal_code AS supplier_postal_code,
    suppliers.phone AS supplier_phone
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id;

_______________________________________
=======================================

// p4_a
SELECT COUNT(*) AS total_rows
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id;

// p4_b
SELECT COUNT(*) AS total_rows
FROM order_details
LEFT JOIN orders ON order_details.order_id = orders.id
LEFT JOIN customers ON customers.id = orders.customer_id
LEFT JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id;

Команда LEFT JOIN має повернути усі рядки таблиці зліва (наприклад, у моєму випадку це order_details) навіть якщо умова не підтвердиться. Значеннями в стовпцях з правої таблиці будуть NULL.
У випадку зміни INNER JOIN на LEFT JOIN загальна кількість рядків не змінился. Це може говорити про те, що значення у таблицях мають відповідні поля. І ще один висновок - що у нас немає полів зі значенням NULL там, де таблиці з'єднано.

// p4_c
SELECT COUNT(*) AS total_rows
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10;

// p4_d
SELECT 
  categories.name AS category_name, 
  COUNT(*) AS total, 
  AVG(order_details.quantity) AS average_quantity
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
GROUP BY category_name;

// p4_e
SELECT * 
FROM (
    SELECT 
      order_details.*,
      AVG(order_details.quantity) OVER (PARTITION BY order_details.order_id) AS average_quantity
    FROM order_details
    INNER JOIN orders ON order_details.order_id = orders.id
    INNER JOIN customers ON customers.id = orders.customer_id
    INNER JOIN products ON products.id = order_details.product_id
    INNER JOIN categories ON categories.id = products.category_id
    INNER JOIN employees ON employees.employee_id = orders.employee_id
    INNER JOIN shippers ON shippers.id = orders.shipper_id
    INNER JOIN suppliers ON suppliers.id = products.supplier_id
) subquery
WHERE average_quantity > 21;

// p4_f
SELECT 
  order_details.id AS order_detail_id,
    order_details.quantity,
  orders.id AS order_id, 
    orders.date AS order_date,
  customers.id AS customer_id, 
    customers.name AS customer_name, 
    customers.address AS customer_address, 
    customers.city AS customer_city, 
    customers.postal_code AS customer_postal_code, 
    customers.country AS customer_country, 
  products.id AS product_id,
    products.name AS product_name,
    products.unit AS product_unit,
    products.price AS product_price,
  categories.id AS category_id,
    categories.name AS category_name,
    categories.description AS category_description,
  employees.employee_id,
    employees.last_name AS employee_last_name,
    employees.first_name AS employee_first_name,
    employees.birthdate AS employee_birthdate,
    employees.photo AS employee_photo,
    employees.notes AS employee_notes,
  shippers.id AS shipper_id,
    shippers.name AS shipper_name,
    shippers.phone AS shipper_phone,
  suppliers.id AS supplier_id,
    suppliers.name AS supplier_name,
    suppliers.contact AS supplier_contact,
    suppliers.address AS supplier_address,
    suppliers.city AS supplier_city,
    suppliers.postal_code AS supplier_postal_code,
    suppliers.phone AS supplier_phone
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
ORDER BY order_details.quantity DESC;

// p4_g
SELECT 
  order_details.id AS order_detail_id,
    order_details.quantity,
  orders.id AS order_id, 
    orders.date AS order_date,
  customers.id AS customer_id, 
    customers.name AS customer_name, 
    customers.address AS customer_address, 
    customers.city AS customer_city, 
    customers.postal_code AS customer_postal_code, 
    customers.country AS customer_country, 
  products.id AS product_id,
    products.name AS product_name,
    products.unit AS product_unit,
    products.price AS product_price,
  categories.id AS category_id,
    categories.name AS category_name,
    categories.description AS category_description,
  employees.employee_id,
    employees.last_name AS employee_last_name,
    employees.first_name AS employee_first_name,
    employees.birthdate AS employee_birthdate,
    employees.photo AS employee_photo,
    employees.notes AS employee_notes,
  shippers.id AS shipper_id,
    shippers.name AS shipper_name,
    shippers.phone AS shipper_phone,
  suppliers.id AS supplier_id,
    suppliers.name AS supplier_name,
    suppliers.contact AS supplier_contact,
    suppliers.address AS supplier_address,
    suppliers.city AS supplier_city,
    suppliers.postal_code AS supplier_postal_code,
    suppliers.phone AS supplier_phone
FROM order_details
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN products ON products.id = order_details.product_id
INNER JOIN categories ON categories.id = products.category_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
LIMIT 4 OFFSET 1;

_______________________________________
---------------------------------------
=======================================